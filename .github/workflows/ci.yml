# © 2025. TU Dortmund University,
# Institute of Energy Systems, Energy Efficiency and Energy Economics,
# Research group Distribution grid planning and operation
#

name: CI

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - main
      - dev
      - 'hotfix/*'
      - 'rel/*'
      - 'dependabot/*'
  pull_request:
    branches:
      - main
      - dev

jobs:
  buildAndTest:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Check Branch
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          if [[ "$BRANCH_NAME" == refs/heads/* ]]; then
            BRANCH_NAME="${BRANCH_NAME#refs/heads/}"
          fi
          
          export BRANCH_NAME
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          ./gradlew checkBranchName -PbranchName="$BRANCH_NAME" --warning-mode=none
          
          bash scripts/branch_type.sh

      - name: Validate Java Version Consistency
        run: |
          # Extract expected Java-Version from build.gradle
          EXPECTED_JAVA=$(grep "javaVersion = " build.gradle | sed 's/.*JavaVersion\.VERSION_\([0-9]*\).*/\1/')
    
          # Extract current Java-Version from JAVA_HOME
          ACTUAL_JAVA=$(echo $JAVA_HOME | sed 's/.*jdk\/\([0-9]*\)\..*/\1/')

          echo "Expected Java version from build.gradle: $EXPECTED_JAVA"
          echo "Actual Java version from runner: $ACTUAL_JAVA"

          if [ "$EXPECTED_JAVA" != "$ACTUAL_JAVA" ]; then
            echo "❌ Java version mismatch!"
            echo "build.gradle specifies Java $EXPECTED_JAVA but runner uses Java $ACTUAL_JAVA"
            exit 1
          fi

          echo "✅ Java versions are consistent: $EXPECTED_JAVA"

      - name: Extract Java Version from build.gradle
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          JAVA_VERSION=$(grep "javaVersion = " build.gradle | sed 's/.*javaVersion = JavaVersion\.VERSION_\([0-9]*\).*/\1/')
          echo "JAVA_VERSION=$JAVA_VERSION" >> $GITHUB_ENV
          echo "Extracted Java version from PR branch: $JAVA_VERSION"

      - name: Version Check
        if: ${{ github.event_name == 'pull_request' }}
        env:
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: bash scripts/run-version-check.sh

      - name: Build Project
        run: ./gradlew --refresh-dependencies clean assemble spotlessCheck

      - name: Run Tests
        run: |
          ./gradlew pmdMain pmdTest spotbugsMain spotbugsTest test jacocoTestReport jacocoTestCoverageVerification \
          reportScoverage checkScoverage

      - name: Build Scala-Docs
        run: ./gradlew scaladoc

      - name: SonarQube
        run: |
          ./gradlew sonar \
          -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ vars.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.qualitygate.wait=true

      #Deployment
      - name: Deploy
        if: github.ref == 'refs/heads/main'
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.MAVENCENTRAL_SIGNINGKEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.MAVENCENTRAL_SIGNINGPASS }}
          ORG_GRADLE_PROJECT_user: ${{ secrets.MAVENCENTRAL_USER }}
          ORG_GRADLE_PROJECT_password: ${{ secrets.MAVENCENTRAL_PASS }}
        run: |
          currentVersion=$(./gradlew -q devVersion)

          echo "currentVersion=$currentVersion"

          ./gradlew publish -PdeployVersion=$currentVersion
