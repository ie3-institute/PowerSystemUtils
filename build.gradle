plugins {
	id 'groovy' // groovy support
	id 'java' // java support
	id 'scala' // scala support
	id 'maven-publish'
	id 'signing'
	id 'pmd' //code check, working on source code
	id 'com.github.spotbugs' version '6.4.2' //code check, working on byte code
	id 'com.diffplug.spotless' version '7.2.1'//code format
	id 'jacoco' // java code coverage plugin
	id "org.sonarqube" version "6.3.1.5724" // sonarqube
	id "org.scoverage" version "8.1" // scala code coverage scoverage
	id "com.github.maiflai.scalatest" version "0.33" // run scalatest without specific spec task
	id 'net.thauvin.erik.gradle.semver' version '1.0.4' // semantic versioning
}

ext {
	javaVersion = JavaVersion.VERSION_17
	scalaVersion = '3'
	scalaBinaryVersion = '3.7.3'
	scriptsLocation = 'gradle' + File.separator + 'scripts' + File.separator //location of script plugins
}

group = 'com.github.ie3-institute'
description = 'PowerSystemUtils'

java {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

apply from: scriptsLocation + 'pmd.gradle'
apply from: scriptsLocation + 'spotbugs.gradle'
apply from: scriptsLocation + 'spotless.gradle'
apply from: scriptsLocation + 'checkJavaVersion.gradle'
apply from: scriptsLocation + 'test.gradle'
apply from: scriptsLocation + 'jacoco.gradle' // jacoco java code coverage
apply from: scriptsLocation + 'mavenCentralPublish.gradle'
apply from: scriptsLocation + 'sonarqube.gradle'
apply from: scriptsLocation + 'scoverage.gradle' // scoverage scala code coverage
apply from: scriptsLocation + 'semVer.gradle'
apply from: scriptsLocation + 'branchName.gradle'

repositories {
	mavenCentral()
}

dependencies {
	// logging
	implementation 'org.slf4j:slf4j-api:2.0.17'  // slf4j wrapper
	implementation 'com.lmax:disruptor:4.0.0' // async logging
	implementation platform('org.apache.logging.log4j:log4j-bom:2.25.1')
	implementation 'org.apache.logging.log4j:log4j-api' // log4j
	implementation 'org.apache.logging.log4j:log4j-core' // log4j
	implementation 'org.apache.logging.log4j:log4j-slf4j-impl' // log4j -> slf4j

	implementation "com.typesafe.scala-logging:scala-logging_$scalaVersion:3.9.6"

	implementation 'javax.measure:unit-api:2.2' // quantities
	implementation 'tech.units:indriya:2.2.3'  // quantities
	implementation 'com.google.code.gson:gson:2.13.2' // java serialization, POJOs -> JSON
	implementation 'org.apache.commons:commons-lang3:3.18.0' // for HashCodeBuilder
	implementation 'org.apache.commons:commons-math3:3.6.1' // mathematics and statistics components
	// JTS Topology Suite for GeoPositions, License: EPL 1.0 / EDL 1.0
	implementation 'org.locationtech.jts:jts-core:1.20.0'
	implementation 'org.locationtech.jts.io:jts-io-common:1.20.0'

	// Used in EmpiricalRandom.java, could be removed
	implementation 'org.eclipse.collections:eclipse-collections:13.0.0'

	implementation 'commons-io:commons-io:2.20.0' // I/O functionalities
	implementation 'commons-codec:commons-codec:1.19.0' // needed by commons-compress
	implementation 'org.apache.commons:commons-compress:1.28.0' // I/O functionalities

	// testing
	testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'

	/* --- Scala libs --- */
	// CORE Scala //
	implementation "org.scala-lang:scala3-library_3:${scalaBinaryVersion}"
	implementation "org.scala-lang.modules:scala-parallel-collections_${scalaVersion}:1.2.0"
	implementation "org.typelevel:cats-core_${scalaVersion}:2.13.0" // advanced functional programming

	// TEST Scala //
	implementation "org.scalatest:scalatest_$scalaVersion:3.2.19"
	testRuntimeOnly 'com.vladsch.flexmark:flexmark-all:0.64.8'
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}
